#!/bin/bash

avr_bin=".."

bm=`echo $1|sed "s/\///"`
fname=""
top=""

BM_PATH="../examples"
OUT_PATH="$avr_bin/work_$bm"
OUT_YOSYS="$bm".ilang
OUT_VERILOG="$bm"_y.v
DEFAULT_TOP="main"

prefix="../examples/$1/"
flag=0
while read -r line || [[ -n "$line" ]]; do
    if [ $flag = 1 ]
    then
        fname=$(echo $line)
        fname=${fname#$prefix}
    elif [ $flag = 2 ]
    then
        top=$(echo $line)
    fi

    if [ $line = "design_file" ]
    then
        flag=1
    elif [ $line = "top_module" ]
    then
        flag=2
    else
        flag=0
    fi
done < $BM_PATH/$1/$1.fconfig

echo "bm: $bm" "fname: $fname" "top: $top"

rm -rf $OUT_PATH
mkdir $OUT_PATH
cp -R $BM_PATH/$bm/* $OUT_PATH
mv $OUT_PATH/$bm.fconfig $OUT_PATH/fconfig

dir="$PWD"
cd $OUT_PATH

if [ "$top" = "" ]
then
	top=$DEFAULT_TOP
	echo "top_module" >> fconfig
	echo $DEFAULT_TOP >> fconfig
	
yosys -Q -T -q -q -l yosys.log -p "\
read_verilog -noopt -nolatches -sv $fname
hierarchy -auto-top;
hierarchy -libdir $OUT_PATH;
hierarchy -check;
rename -top $top;
delete -output $top;
expose $top/"prop_neg";
proc; clean;
splitnets -driver; clean;
pmuxtree; clean;
memory; clean;
flatten; clean -purge;
setundef -undriven -expose; clean;
check;
write_ilang $OUT_YOSYS;
write_verilog -attr2comment $OUT_VERILOG;
"
else
yosys -Q -T -q -q -l yosys.log -p "\
read_verilog -noopt -nolatches -sv $fname
hierarchy -top $top;
hierarchy -libdir $OUT_PATH;
hierarchy -check;
rename -top $top;
delete -output $top;
expose $top/"prop_neg";
proc; clean;
splitnets -driver; clean;
pmuxtree; clean;
memory; clean;
flatten; clean -purge;
setundef -undriven -expose; clean;
check;
write_ilang $OUT_YOSYS;
write_verilog -attr2comment $OUT_VERILOG;
"
fi

cd $dir

mkdir -p $avr_bin/work_$bm/dot
mkdir -p $avr_bin/work_$bm/dot/ref
mkdir -p $avr_bin/work_$bm/dot/ab_ref
mkdir -p $avr_bin/work_$bm/dot/excc
mkdir -p $avr_bin/work_$bm/dot/ab

$avr_bin/bin/vwn $avr_bin/work_$bm $avr_bin/bin > $avr_bin/work_$bm/vwn.output 2>> $OUT_PATH/avr.err
$avr_bin/bin/dpa $avr_bin/work_$bm $avr_bin/bin > $avr_bin/work_$bm/dpa.output 2>> $OUT_PATH/avr.err

$avr_bin/bin/reach $avr_bin/work_$bm $avr_bin/bin > $avr_bin/work_$bm/reach.output  2>> $OUT_PATH/avr.err
avr_exit=$?


printf "avr2: $bm (time: %.3f seconds)\n" $avr2_runtime
tail -n 3 $avr_bin/work_$bm/reach.output
echo ""

exit $avr_exit
